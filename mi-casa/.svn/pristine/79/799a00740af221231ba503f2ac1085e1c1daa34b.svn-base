package org.habitatnicaragua.micasa.servicio;

import java.net.URL;
import java.sql.Date;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.inject.Inject;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.habitatnicaragua.micasa.MiCasaApplication;
import org.habitatnicaragua.micasa.dao.CatMaestroDao;
import org.habitatnicaragua.micasa.dao.ComunDao;
import org.habitatnicaragua.micasa.modelo.CatMaestro;
import org.habitatnicaragua.micasa.modelo.CatMaestro_;
import org.habitatnicaragua.micasa.util.ExcepcionUno;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional(rollbackFor = Exception.class)
public class ServicioComunImpl implements ServicioComun {

	@Inject
	private ComunDao comunDao;
	
	@Inject
	private CatMaestroDao catMaestroDao;
	
	@Inject
	private ServicioPerfil servicioPerfil;
	
	@Override
	public Date getFechaSistema() {
		return comunDao.getSysDate();
	}
	
	@Override
	public Date getFechaHoraSistema() {
		return new Date(comunDao.getSysDateTime().getTime());
	}
	
	@Override
	public boolean isTextoLimpio(String texto) {
		if(StringUtils.isBlank(texto)) return true;
		
		if(texto.matches("[a-zA-Z0-9_]+[ a-zA-Z0-9_áéíóúÁÉÍÓÚñÑ]*")){
			return true;
		}
		
		return false;
	}
	
	@Override
	public boolean isNumeroEnteroValido(String numero) {
		if(numero==null) return true;
		
		if(numero.toString().matches("[0-9]*")){
			return true;
		}
		
		return false;
	}
	
	@Override
	public boolean isEmailValido(String email) {
		if(StringUtils.isBlank(email)) return true;
		
		try {
			InternetAddress internetAddress = new InternetAddress(email);
			internetAddress.validate();
		} catch (AddressException e) {
			return false;
		}
		
		return true;
	}
	
	@Override
	public boolean isURLValida(String urlString) {
		try {
			URL url = new URL(urlString);
	        url.toURI();
	        return true;
	    } catch (Exception exception) {
	        return false;
	    }
	}
	
	@Override
	public String limpiarNombreArchivo(String nombre) {
		return nombre.replaceAll("[^a-zA-Z0-9\\.\\-]", "_");
	}
	
	/** Inicio: CatMaestro **/
	
	// Maestro
	@Override
	public CatMaestro buscarCatMaestroPorId(Long id) {
		return catMaestroDao.findOne(id);
	}
	
	@Override
	@Cacheable(MiCasaApplication.CACHE_APP_L1)
	public CatMaestro buscarCatMaestroPorTipoNombre(String tipoCatalogo, String nombre) {
		return catMaestroDao.buscarCatalogoPorTipoNombre(tipoCatalogo, nombre);
	}
	
	@Override
	public Page<CatMaestro> listarCatMaestro(Pageable pagina, String filtro) {
		Page<CatMaestro> resultado = null;
		
		
		// SOLO MOSTRAR LOS ACTIVOS
		Specification<CatMaestro> filtroBase = new Specification<CatMaestro>(){
			@Override
			public Predicate toPredicate(Root<CatMaestro> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				return cb.equal(root.get(CatMaestro_.activo), true);
			}
		};
				
		
		Specification<CatMaestro> where = null;
		if(!StringUtils.isBlank(filtro)) {
			final String filtroSql = StringUtils.trim(filtro.toUpperCase()) + "%";
			where = new Specification<CatMaestro>() {
	
				@Override
				public Predicate toPredicate(Root<CatMaestro> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					List<Predicate> predicates = new LinkedList<>();
					predicates.add(cb.like(cb.upper(root.get(CatMaestro_.tipoCatalogo)), filtroSql));
					predicates.add(cb.like(cb.upper(root.get(CatMaestro_.nombre)), filtroSql));
					
					return cb.or(predicates.toArray(new Predicate[0]));
				}
				
			};
		}
		
		if(servicioPerfil.isUsuarioActualMiembroRol("ADMIN")) {
			resultado = catMaestroDao.findAll(Specifications.where(where), pagina);
		} else {
			resultado = catMaestroDao.findAll(Specifications.where(filtroBase).and(where), pagina);
		}
		
		return resultado;
	}
	
	@Override
	public void eliminarCatMaestro(Long idCatMaestro) throws ExcepcionUno {
		if(idCatMaestro==null) {
			throw ExcepcionUno.objetoNull();
		}
		
		CatMaestro catMaestro =  buscarCatMaestroPorId(idCatMaestro);
		
		catMaestro.setActivo(false);
		
		try {
			catMaestroDao.save(catMaestro);
		} catch (Throwable t){
			throw new ExcepcionUno(t);
		}
    }
	
	@Override
	public CatMaestro guardarCatMaestro(CatMaestro catMaestro) throws ExcepcionUno {
		if(catMaestro==null) {
			throw ExcepcionUno.objetoNull();
		}

		if (StringUtils.isBlank(catMaestro.getTipoCatalogo())){
			throw ExcepcionUno.campoRequerido("Tipo Cat&#225;logo");
		}
		
		if (StringUtils.isBlank(catMaestro.getNombre())) {
			throw ExcepcionUno.campoRequerido("Nombre");
		}
		
		try {
			return catMaestroDao.save(catMaestro);
		} catch (Throwable t){
			throw new ExcepcionUno(t);
		}
	}
	
	@Override
	public List<String> listarTiposCatalogos() {
		List<String> resultado = null;		
		resultado = catMaestroDao.buscarTiposCatalogos();
		
		return resultado;
	}
	
	@Override
	public String getValorParametro(String parametro) {
		return getValorParametro(parametro, null);
	}
	
	@Override
	public String getValorParametro(String parametro, String valorDefault) {
		String val = catMaestroDao.buscarValorParametro(parametro);
		
		if(val==null) {
			return valorDefault;
		}
		
		return val;	
	}
	
	@Override
	public List<CatMaestro> listarCatalogosPorTipo(String tipoCatalogo) {
		return catMaestroDao.listarCatalogosPorTipo(tipoCatalogo);
	}
	
	@Override
	public List<CatMaestro> listarCatalogosPorTipo(String tipoCatalogo, Sort orden) {
		return catMaestroDao.listarCatalogosPorTipo(tipoCatalogo, orden);
	}
	
	@Override
	public List<String> listarStringCatalogosPorTipo(String tipoCatalogo) {
		List<CatMaestro> datos = listarCatalogosPorTipo(tipoCatalogo);
		
		List<String> resutlado = new ArrayList<String>(datos.size());
		
		for(CatMaestro catMaestro:datos) {
			resutlado.add(catMaestro.getNombre());
		}
		
		return resutlado;
	}
	
	
	/** Fin: CatMaestro **/
}

