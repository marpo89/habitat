package org.habitatnicaragua.micasa.controlador.gestion;

import java.io.IOException;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;

import org.habitatnicaragua.micasa.controlador.comun.ControladorBaseUno;
import org.habitatnicaragua.micasa.modelo.CatMaestro;
import org.habitatnicaragua.micasa.modelo.PerUsuario;
import org.habitatnicaragua.micasa.modelo.PryProyecto;
import org.habitatnicaragua.micasa.modelo.Rol;
import org.habitatnicaragua.micasa.servicio.ServicioContenido;
import org.habitatnicaragua.micasa.servicio.ServicioPerfil;
import org.habitatnicaragua.micasa.servicio.ServicioProyecto;
import org.habitatnicaragua.micasa.util.ExcepcionUno;
import org.omnifaces.util.Faces;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.UploadedFile;
import org.springframework.data.domain.Sort;

import lombok.Getter;
import lombok.Setter;

@Named("proyectosVista")
@ViewScoped
@Getter
@Setter
public class ProyectosVista extends ControladorBaseUno {
	private static final long serialVersionUID = 1L;

	@Inject
	private ServicioProyecto servicioProyecto;
	
	@Inject
	private ServicioContenido servicioContenido;
	
	@Inject
	private ServicioPerfil servicioPerfil;
	
	private boolean modoEditarMaestro = true;
	private Long idProyecto = null;
	private PryProyecto pryProyecto = null;
	private String comentario = null;
	
	private List<CatMaestro> listaEstados = null;
	private List<PerUsuario> listaTecnicos = null;
	
	@PostConstruct
	public void init() {
		idProyecto = getLongRequestParameter("idProyecto");
		
		if(idProyecto!=null) {
			pryProyecto = servicioProyecto.buscarPryProyectoPorId(idProyecto);
			if(pryProyecto==null) {
				try {
					Faces.redirect(Faces.getRequestContextPath() + "/index.xhtml");
				} catch (IOException e) { }
				return;
			}
			modoEditarMaestro = true;
		}
	}
	
	public void guardarRegistro() {
		if (pryProyecto == null) {
			throw ExcepcionUno.objetoNull();
		}
		pryProyecto = servicioProyecto.guardarPryProyectoUsuario(pryProyecto);
		
		mostrarAdvertencia("Proyecto actualizado con éxito.");
	}
	
	public void guardarComentario() {
		if (pryProyecto == null) {
			throw ExcepcionUno.objetoNull();
		}
		
		servicioProyecto.guardarPryComentario(comentario, pryProyecto);
		comentario = "";
		
		mostrarAdvertencia("Comentario agregado.");
	}
	
	public void eliminarComentario() {
		Long idComentario = this.getLongRequestParameter("idComentario");
		
		if (idComentario == null) {
			throw ExcepcionUno.objetoNull();
		}

		servicioProyecto.eliminarPryComentario(idComentario);
	}
	
	public void eliminarArchivo() {
		Long idProyecto = this.getLongRequestParameter("idProyecto");
		Long idArchivo = this.getLongRequestParameter("idArchivo");
		
		if (idProyecto == null || idArchivo == null) {
			throw ExcepcionUno.objetoNull();
		}
		
		servicioProyecto.eliminarCmsArchivo(idProyecto, idArchivo);
	}
	
	public String getEnlaceListado() {
		return getHttpServletRequest().getContextPath() + "/gestion/proyectos.xhtml";
	}
	
	public String getEnlaceListadoContenido() {
		return getHttpServletRequest().getContextPath() + "/gestion/proyectroForm.xhtml?idProyecto="+idProyecto;
	}
	
	public String getTituloPagina() {
		if(!modoEditarMaestro) return "Proyecto";
		
		if(idProyecto==null) return "Proyectos";
		
		return "Gestionar Proyecto #" + idProyecto;
	}
	
	public String getInfoRegistroActual() {
		if(pryProyecto!=null) {
			return pryProyecto.getIdProyecto().toString();
		}		
		return "Nuevo";
	}
	
	public List<CatMaestro> getListaEstados(){
		if(listaEstados==null) {
			listaEstados = servicioComun.listarCatalogosPorTipo("PROYECTO_ESTADO", new Sort(Sort.Direction.ASC, "idCatMaestro"));
		}
		
		return listaEstados;
	}

	public List<PerUsuario> getListaTecnicos(){
		if(listaTecnicos==null) {
			listaTecnicos = servicioPerfil.listarTecnicos();
		}
		
		return listaTecnicos;
	}
	
	public boolean isPuedeCambiarTecnico() {
		if(servicioPerfil.isUsuarioActualMiembroRol(Rol.ADMIN_TECNICO.name()) || 
				servicioPerfil.isUsuarioActualMiembroRol(Rol.ADMIN.name()) ) {
			return true;
		}
		
		return false;
	}
	
	public void subirArchivoProyecto(FileUploadEvent event) {
		UploadedFile archivo = event.getFile();
		
		if(archivo==null) return;
		
		if (pryProyecto == null) {
			throw ExcepcionUno.objetoNull();
		}
		
		try {
			servicioProyecto.subirArchivoProyecto(pryProyecto, archivo.getFileName(), archivo.getInputstream());
			
			mostrarAdvertencia("Archivo agregado con éxito.");
			
		} catch (IOException e) {
			throw new ExcepcionUno(e);
		}
	}
}
